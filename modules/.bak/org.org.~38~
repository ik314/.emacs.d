#+TITLE: org-mode: the reason why we use emacs
#+AUTHOR: Aqeel Akber

* org-mode
I would be lying if I said emacs was a good text editor out of the
box. It's great when you configure it, sure, but why the hell would
you bother doing that? Answer: Org mode. Look it up.

#+BEGIN_SRC emacs-lisp
  (use-package org :ensure t
    :init
    ;; Proper code blocks
    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t)
    ;; Babel languages
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python  . t)
       (shell   . t)
       (C       . t)
       (fortran . t)
       (haskell . t)
       (awk     . t)
       (js      . t)
       (R       . t)
       (octave  . t)
       (matlab  . t)
       (perl    . t)
       (gnuplot . t)
       (latex   . t)
       (emacs-lisp . t)))
    ;; Agenda
    (setq org-log-done t)
    ;; Encoding
    (setq org-export-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)
    (set-charset-priority 'unicode)
    (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
    ;; Don't allow editing of folded regions
    (setq org-catch-invisible-edits 'error)
    ;; Start agenda on Monday
    (setq org-agenda-start-on-weekday 1)
    ;; Enable indentation view, does not effect file
    (setq org-startup-indented t)
    ;; Attachments
    (setq org-id-method (quote uuidgen))
    (setq org-attach-directory "attach/")
    :bind
    (("\C-ca" . org-agenda)
     ("\C-cl" . org-store-link)
     ("\C-cc" . org-capture))
    )
  :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

  (add-hook 'org-mode-hook #'(lambda ()
                               ;; make the lines in the buffer wrap around the edges of the screen.
                               ;; to press C-c q  or fill-paragraph ever again!
                               (visual-line-mode)
                               (org-indent-mode)))

  (add-hook 'org-mode-hook
             (lambda ()
             (define-key evil-normal-state-map (kbd "TAB") 'org-cycle)))

  (setq company-global-modes '(not org-mode))

  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.25))

  (setq org-hide-emphasis-markers t)
#+END_SRC

** org-roam!
Developing an ecosystem, a second brain.
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
      :ensure t
      :custom
      (org-roam-directory (file-truename "/home/ik/org-roam/"))
      :bind (("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ("C-c n g" . org-roam-graph)
             ("C-c n i" . org-roam-node-insert)
             ("C-c n c" . org-roam-capture)
                 ("C-c n #" . org-roam-tag-add)
             ;; Dailies
             ("C-c n j" . org-roam-dailies-capture-today)
             ("C-c n t" . org-roam-dailies-find-today))
      :config

      (org-roam-setup)
      ;; If using org-roam-protocol
      (require 'org-roam-protocol))
      (setq org-roam-v2-ack t)
#+END_SRC

Also let us include the =org-roam-ui= package, that uses [[./websocket.org][websocket]],
#+BEGIN_SRC emacs-lisp
  ;; also requires simple-httpd
  (use-package simple-httpd
    :ensure t)
  ;; currently not on MEPLA yet so manually install located at .emacs.d/private
  (require 'websocket)
  (add-to-list 'load-path "~/.emacs.d/private/org-roam-ui")
  (load-library "org-roam-ui")
#+END_SRC

I also want to be able to have firm referencing that allows for back propagating through texts (particularly if they are digital).
#+BEGIN_SRC emacs-lisp
  (use-package helm-bibtex
    :ensure t)


  (use-package org-ref
    :ensure t
    :config
    (require 'doi-utils)
    (require 'org-ref-isbn)
    (setq reftex-default-bibliography '("~/biblio/references.bib"))
    (setq org-ref-default-bibliography '("~/biblio/references.bib")
          org-ref-pdf-directory "~/research")

    (setq bibtex-completion-bibliography "~/biblio/references.bib"
          bibtex-completion-library-path "~/research"
          bibtex-completion-notes-path "~/org-roam"))


  (use-package org-roam-bibtex
    :ensure t)
#+END_SRC
** org-download
#+BEGIN_SRC emacs-lisp
(use-package org-download :ensure t
:config
(require 'org-download
(add-hook 'dired-mode-hook 'org-download-enable)))
#+END_SRC

** org-bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets :ensure t
:config
(require 'org-bullets))
#+END_SRC
** org-cliplink
#+BEGIN_SRC emacs-lisp
(use-package org-cliplink :ensure t
)
#+END_SRC
** org-agenda (General GTD Organization)
#+BEGIN_SRC emacs-lisp
    (setq org-agenda-files '("~/gtd/inbox.org"
                            "~/gtd/gtd.org"
                            "~/gtd/tickler.org"))

    (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                   (file+headline "~/gtd/inbox.org" "Tasks")
                                   "* TODO %i%?")
                                  ("T" "Tickler" entry
                                   (file+headline "~/gtd/tickler.org" "Tickler")
                                   "* %i%? \n %U")
                                   ("j" "Journal" entry
                                    (file "~/the_lab/journal.org")
				       "* %i%? \n %U")))

    (setq org-refile-targets '(("~/gtd/gtd.org" :maxlevel . 3)
                               ("~/gtd/someday.org" :level . 1)
                               ("~/gtd/tickler.org" :maxlevel . 2)))
  ; Pressing C-c C-t sets the TODO keyword.
    (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))

    (setq org-agenda-custom-commands 
          '(("o" "At the office" tags-todo "@office"
             ((org-agenda-overriding-header "Office")
              (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))))

    (defun my-org-agenda-skip-all-siblings-but-first ()
      "Skip all but the first non-done entry."
      (let (should-skip-entry)
        (unless (org-current-is-todo)
          (setq should-skip-entry t))
        (save-excursion
          (while (and (not should-skip-entry) (org-goto-sibling t))
            (when (org-current-is-todo)
              (setq should-skip-entry t))))
        (when should-skip-entry
          (or (outline-next-heading)
              (goto-char (point-max))))))

    (defun org-current-is-todo ()
      (string= "TODO" (org-get-todo-state)))
#+END_SRC

#+RESULTS:
: org-current-is-todo

*** org-gcal
Intertwined with these system, there should be a way for the agenda to interact with google calendar, using =org.gcal= and other neat elisp scripts.
#+BEGIN_SRC emacs-lisp
  (use-package org-gcal
    :ensure t
    :config
    (setq org-gcal-client-id "954183498626-78c6rv7ndnmuj88ue3nbgaqis5jt6oj3.apps.googleusercontent.com"
          org-gcal-client-secret "bnE_7vT_TX9ySBDPkn2KJU5n"
          org-gcal-file-alist '(("7bg87dcbfokn9abq7o3meqn7p8@group.calendar.google.com" . "~/gtd/gcal.org"))))
#+END_SRC

#+RESULTS:
: t

** Export Settings for LaTeX
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes
             '("standard"
                   "\\documentclass{article}
                    \\usepackage[margin=0.8in]{geometry}
                    \\displaymode
                    \\usepackage{parskip}
                    \\usepackage{amsmath} 
                    \\usepackage{amssymb}
                    \\usepackage{amsthm}
                    \\usepackage{import}
                    \\usepackage{xifthen}
                    \\usepackage{pdfpages}
                    \\usepackage{transparent}
                    \\usepackage{hyperref}
                    \\newcommand{\\incfic}[1]{%
                        \\def\svgwidth{\\columnwidth}
                        \\import{./figures/}{#1.pdf_tex}}
                    [NO-DEFAULT-PACKAGES]
                    [NO-PACKAGES]"
                   ("\\section*{%s}" . "\\section*{%s}")
                 ("\\subsection*{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection*{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph*{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph*{%s}" . "\\subparagraph*{%s}")))
#+END_SRC



* ox-twbs
Apparently a module for exporting org files in a nice elegant way.
#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs
     :ensure t
   )
#+END_SRC


* Hacks for Getting Exports to work for roam-frontend
(Thanks Jethro :))
# #+BEGIN_SRC elisp
# (defun org-html--reference (datum info &optional named-only)
#   "Return an appropriate reference for DATUM.
# DATUM is an element or a `target' type object.  INFO is the
# current export state, as a plist.
# When NAMED-ONLY is non-nil and DATUM has no NAME keyword, return
# nil.  This doesn't apply to headlines, inline tasks, radio
# targets and targets."
#   (let* ((type (org-element-type datum))
# 	 (user-label
# 	  (org-element-property
# 	   (pcase type
# 	     ((or `headline `inlinetask) :CUSTOM_ID)
# 	     ((or `radio-target `target) :value)
# 	     (_ :name))
# 	   datum))
#          (user-label (or user-label
#                          (when-let ((path (org-element-property :ID datum)))
#                            (concat "ID-" path)))))
#     (cond
#      ((and user-label
# 	   (or (plist-get info :html-prefer-user-labels)
# 	       ;; Used CUSTOM_ID property unconditionally.
# 	       (memq type '(headline inlinetask))))
#       user-label)
#      ((and named-only
# 	   (not (memq type '(headline inlinetask radio-target target)))
# 	   (not user-label))
#       nil)
#      (t
#       (org-export-get-reference datum info)))))
# #+END_SRC
# 
# #+RESULTS:
# : org-html--reference
# 
# #+BEGIN_SRC elisp
# (org-id-update-id-locations (seq-filter 'file-regular-p (directory-files "./")) t)
#         (let ((path (car (org-id-find (s-replace "id:" "" (org-element-property :path link))))))
#           (if path
#               (org-element-put-property link :path
#                                         (my/format-path-for-anchor-tag
#                                          (car (last (s-split "/" path)))))))
# # #+END_SRC



